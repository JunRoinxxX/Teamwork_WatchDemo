#include "sys.h"
#include "usart.h"




//如果使用ucos,则包括下面的头文件即可.
#if SYSTEM_SUPPORT_OS
#include "includes.h"					//ucos 使用	  
#endif

//加入以下代码,支持printf函数,而不需要选择use MicroLIB
#if 1
#pragma import(__use_no_semihosting)
//标准库需要的支持函数
struct __FILE {
    int handle;
};

FILE __stdout;
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
    x = x;
}
//重定义fputc函数
int fputc(int ch, FILE *f) {
    while((USART1->SR & 0X40) == 0); //循环发送,直到发送完毕
    USART1->DR = (u8) ch;
    return ch;
}
#endif

#if EN_USART1_RX   //如果使能了接收
//串口1中断服务程序
//注意,读取USARTx->SR能避免莫名其妙的错误
extern u8 IR_Channel;

u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.
u8 cmd_stor_buffer1[4] = {0xFE, 0xAB, 0xCD, 0x88};		//红外存储指令
u8 cmd_send_buffer1[4] = {0xFE, 0xDC, 0xBA, 0x66};		//红外发射指令
extern u8 Fill_IR_Code[4];
//接收状态
//bit15，	接收完成标志
//bit14，	接收到0x0d
//bit13~0，	接收到的有效字节数目
u16 USART_RX_STA = 0;     //接收状态标记

//初始化IO 串口1
//bound:波特率
void uart_init(u32 bound) {
    //GPIO端口设置
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
	USART_ClockInitTypeDef USART_ClockInitStructure;
//    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); //使能GPIOA时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); //使能USART1时钟

    //串口1对应引脚复用映射
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1); //GPIOA9复用为USART1
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1); //GPIOA10复用为USART1

    //USART1端口配置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;// | GPIO_Pin_10; //GPIOA9与GPIOA10
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN; //上拉
    GPIO_Init(GPIOA, &GPIO_InitStructure); //初始化PA9，PA10
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; //GPIOA9与GPIOA10
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;//复用功能
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; //上拉
    GPIO_Init(GPIOA, &GPIO_InitStructure); //初始化PA9，PA10

    //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = bound;//波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Tx;	//收发模式
    USART_Init(USART1, &USART_InitStructure); //初始化串口1
	
	USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;     					//时钟低电平活动
	USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;         						//设置SCLK引脚上时钟输出的极性为低电平
	USART_ClockInitStructure.USART_CPHA = USART_CPHA_1Edge;   							//时钟第一个边沿进行数据捕获
	USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;  					//最后一位数据的时钟脉冲不从SCLK输出
	USART_ClockInit(USART1,&USART_ClockInitStructure);

    USART_Cmd(USART1, ENABLE);  //使能串口1

    //USART_ClearFlag(USART1, USART_FLAG_TC);

#if 0//EN_USART1_RX
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断

    //Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; //抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
    NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、

#endif

}


void USART1_IRQHandler(void) {              	//串口1中断服务程序
    u8 Res;
#if SYSTEM_SUPPORT_OS 		//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
    OSIntEnter();
#endif
    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) { //接收中断(接收到的数据必须是0x0d 0x0a结尾)
        Res = USART_ReceiveData(USART1); //(USART1->DR);	//读取接收到的数据

        if((USART_RX_STA & 0x8000) == 0) { //接收未完成
            if(USART_RX_STA & 0x4000) { //接收到了0x0d
                if(Res != 0x0a)USART_RX_STA = 0; //接收错误,重新开始
                else {
					USART_RX_STA |= 0x8000;	//接收完成了
					Fill_IR_Code[IR_Channel-1] = 1;
				}
            } else { //还没收到0X0D
                if(Res == 0x0d)USART_RX_STA |= 0x4000;
                else {
                    USART_RX_BUF[USART_RX_STA & 0X3FFF] = Res;
                    USART_RX_STA++;
                    if(USART_RX_STA > (USART_REC_LEN - 1))USART_RX_STA = 0; //接收数据错误,重新开始接收
					
					Fill_IR_Code[IR_Channel-1] = 0;
                }
            }
        }
    }
#if SYSTEM_SUPPORT_OS 	//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
    OSIntExit();
#endif
}
#endif





/**********************************************************************************************************
* 描  述 : USART1发送函数
* 入  参 : 单个字符
* 返回值 : 无
**********************************************************************************************************/
void USART1_SendByte(u8 byte) {
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);
    USART_SendData(USART1, byte);
}
/**********************************************************************************************************
* 描  述 : USART1接收到数据后串口发送出去
* 入  参 : 无
* 返回值 : 无
**********************************************************************************************************/
void USART1_Tx_Puts(u8* cmd_buffer, u8 Area) {
    u16 i;

    for(i = 0; i < 4; i++) {			//数据
        USART1_SendByte(cmd_buffer[i]);
    }
	USART1_SendByte(Area);
}
/**********************************************************************************************************/










